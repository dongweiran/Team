{"remainingRequest":"E:\\Team\\team2\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!E:\\Team\\team2\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\Team\\team2\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Team\\team2\\src\\views\\Health.vue?vue&type=template&id=53668716&scoped=true&","dependencies":[{"path":"E:\\Team\\team2\\src\\views\\Health.vue","mtime":1610695881618},{"path":"E:\\Team\\team2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Team\\team2\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\Team\\team2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Team\\team2\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}