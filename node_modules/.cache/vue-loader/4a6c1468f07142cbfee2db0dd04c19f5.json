{"remainingRequest":"E:\\Team\\team2\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!E:\\Team\\team2\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\Team\\team2\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Team\\team2\\src\\views\\Me.vue?vue&type=template&id=852a155c&scoped=true&","dependencies":[{"path":"E:\\Team\\team2\\src\\views\\Me.vue","mtime":1610444407992},{"path":"E:\\Team\\team2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Team\\team2\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\Team\\team2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Team\\team2\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}