{"remainingRequest":"E:\\Team\\team2\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!E:\\Team\\team2\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\Team\\team2\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Team\\team2\\src\\views\\Shopping.vue?vue&type=template&id=5428e0bc&","dependencies":[{"path":"E:\\Team\\team2\\src\\views\\Shopping.vue","mtime":1610544665296},{"path":"E:\\Team\\team2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Team\\team2\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\Team\\team2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Team\\team2\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}